"use strict";function funText(t,a){var n=t.innerText;t.innerHTML="",n.split("").map(function(n,e){var i=document.createElement("span");n=" "===n?"&nbsp;":n,i.innerHTML=n,i.className=a,i.style.display="inline-block",i.style.animationDelay=100*e+"ms",t.appendChild(i)})}
"use strict";function AI(o){setInterval(function(){for(var a in gameObjects)if(gameObjects[a]!==o){var t=gameObjects[a].state.positionX-o.state.positionX;if(Math.abs(t)<=200)if(0===Math.round(Math.random()))r(0);else{var e=Math.floor(3*Math.random()+1);r(e)}else{var n=Math.floor(3*Math.random()+1);r(n)}}},1e3);var r=function(a){switch(a){case 0:o.runAction("hit");break;case 1:o.runAction("move",1);break;case 2:o.runAction("move",-1);break;case 3:o.runAction("jump")}}}
"use strict";function Hero(s){var o=this,n=[],a=s.querySelector(".hero__direction"),i=s.querySelector(".ui"),c=document.createElement("div");c.className="hero__health",s.appendChild(c),this.state={action:!1,nextAction:!1,health:100,damage:0,pose:null,direction:1,directionY:1,positionX:0,positionY:0,speedX:0,boostX:0,speedY:0,boostY:0},this.setPose=function(t){return o.state.pose&&requestAnimationFrame(function(){s.classList.remove("hero_"+o.state.pose)}),t&&(o.state.pose=t,requestAnimationFrame(function(){s.classList.add("hero_"+t)})),o},this.unsetPose=function(t){return o.state.pose=null,requestAnimationFrame(function(){s.classList.remove("hero_"+t)}),o},this.setSkin=function(t){return s.classList.remove("hero_"+o.state.skin),(o.state.skin=t)&&s.classList.add("hero_"+t),o},this.runAction=function(t,e){if(o.state.health<=0)return o;if(1!==e&&-1!==e||e!==o.state.direction&&(o.state.direction=e,o.state.speedX=0),-1!==n.indexOf(t))return o.state.nextAction=[t,e],o;var s=!!r[t]&&r[t];if(!s)return o;n.push(t);var a=0;return s.map(function(t){setTimeout(t.action,a),a+=t.duration?t.duration:0}),setTimeout(function(){n.splice(n.indexOf(t,1)),o.state.nextAction&&(o.runAction(o.state.nextAction[0],o.state.nextAction[1]),o.state.nextAction=!1)},a),o};var r={jump:[{name:"jump-start",duration:1500,action:function(){0<!o.state.positionY&&(o.state.speedY=60,o.state.boostX=40)}}],down:[{name:"down-start",duration:500,action:function(){o.setPose("down")}},{name:"down-end",action:function(){o.unsetPose("down")}}],move:[{name:"Step1",duration:300,action:function(){o.state.boostX=35,o.state.pose||o.setPose("step-1")}},{name:"Step2",duration:300,action:function(){o.unsetPose("step-1"),o.state.pose||o.setPose("step-2")}},{name:"stop",action:function(){o.unsetPose("step-2")}}],damage:[{name:"takeDamageStart",duration:300,action:function(){o.setPose("damage")}},{name:"takeDamageEnd",action:function(){o.unsetPose("damage")}}],hit:[{name:"hit1",duration:300,action:function(){o.setPose("hit-1")}},{name:"hit2",duration:300,action:function(){o.unsetPose("hit-1"),o.setPose("hit-2");var t=!1;for(var e in gameObjects)if(gameObjects[e]!==o){var s=gameObjects[e].state.positionX-o.state.positionX,a=gameObjects[e].state.positionY-o.state.positionY;Math.abs(s)<=200&&Math.abs(a)<100&&(t||(0<s?(o.state.direction=1,gameObjects[e].state.direction=-1):(o.state.direction=-1,gameObjects[e].state.direction=1),t=!0),o.state.direction+gameObjects[e].state.direction===0&&0<s*o.state.direction&&(gameObjects[e].state.speedX=-50,gameObjects[e].state.damage+=10))}}},{name:"hitEnd",action:function(){o.unsetPose("hit-2")}}]};return animationsLoop.push(function(){var t=physics(o.state.positionX,o.state.boostX,o.state.speedX,o.state.direction,arena.xMax,arena.xMin);0<o.state.damage&&(o.state.health-=o.state.damage,o.state.damage=0,o.runAction("damage")),o.state.health<=0?(o.state.health=0,c.style.color="#222",o.setPose("dead"),i.style.display="none",o.state.health<=0&&setTimeout(function(){return window.location.reload()},5e3)):0<o.state.health&&o.state.health<=30?c.style.color="#f00":30<o.state.health&&o.state.health<=60?c.style.color="#ff0":60<o.state.health&&(c.style.color="#0f0"),o.state.positionX=t.position,o.state.boostX=t.boost,o.state.speedX=t.speed,o.state.direction=t.direction;var e=physics(o.state.positionY,o.state.boostY,o.state.speedY,o.state.directionY,arena.yMax,arena.yMin);o.state.positionY=e.position,o.state.boostY=e.boost,o.state.speedY=e.speed,o.state.directionY=e.direction,0===o.state.speedY&&0<o.state.positionY&&(o.state.directionY=-1),-1===o.state.directionY&&(o.state.speedY+=3),o.state.positionY<=0&&o.state.speedY<80&&(o.state.boostY=0,o.state.speedY=0,o.state.positionY=0,o.state.directionY=1,"jump"===o.state.pose&&(o.setPose("landed"),setTimeout(function(){o.unsetPose("landed"),o.unsetPose("jump")},300))),0<o.state.speedY?o.state.pose||o.setPose("jump"):o.unsetPose("jump"),s.style.transform="translate(".concat(o.state.positionX,"%, ").concat(-o.state.positionY,"%)"),a.style.transform="scaleX(".concat(o.state.direction,")"),c.innerText=o.state.health}),this}
"use strict";function physics(s,t,a,i,b,h){return a=Math.abs(a)<1?0:a,0<(t=t<=0?0:t)?(t-=1+Math.abs(t)/100,a+=1+Math.abs(t)/100):0!==a&&0<a?a-=1+Math.abs(a)/100:0!==a&&a<0&&(a+=1+Math.abs(a)/100),b<(s+=a/10*i)?i=0<a?-1:1:s<h&&(i=0<a?1:-1),{position:s,boost:t,speed:a,direction:i}}
"use strict";function Ui(){var o=this,n=0,i=-1;this.elements=[],this.makePhrase=function(e){for(var i="",l="abcdefghijklmnopqrstuvwxyz",m=l.length,t=function(t){var s=l.charAt(Math.floor(Math.random()*m)),n=!1;0===t&&o.elements.map(function(e){e.symbols[0]===s&&(t=-1,n=!0)}),n||(i+=s),a=t},a=0;a<e;a++)t(a);return i};for(var t,e=document.querySelectorAll(".ui__element"),s=0;s<e.length;s++){this.elements[s]=new m(e[s]);var l=4;config.lengthPhrasesForActions[this.elements[s].action]&&(l=config.lengthPhrasesForActions[this.elements[s].action]),this.elements[s].setText(this.makePhrase(l))}function m(e){var i=this;return this.elem=e,this.text="",this.action=e.dataset.action,this.direction=e.dataset.direction,this.icon=e.dataset.icon,this.symbols=[],this.elemSymbols=[],this.elemText=document.createElement("div"),this.elemText.classList.add("ui__text"),this.elem.appendChild(this.elemText),this.elemUiIcon=document.createElement("div"),this.elemUiIcon.classList.add("ui__icon"),this.elem.appendChild(this.elemUiIcon),this.elemIcon=document.createElement("div"),this.elemIcon.classList.add("icon"),this.elemIcon.classList.add("icon_"+this.icon),this.elemUiIcon.appendChild(this.elemIcon),this.setText=function(e){i.text=e,i.elemText.innerHTML="";var n="fadeIn";i.text.split("").map(function(e,t){var s=document.createElement("span");e=" "===e?"&nbsp;":e,i.symbols[t]=e,s.innerHTML=e,s.className="ui__symbol "+n,s.style.display="inline-block",s.style.animationDelay=100*t+"ms",i.elemSymbols[t]=s,i.elemText.appendChild(s),setTimeout(function(){s.classList.remove(n)},100*(t+1))})},this}this.found=function(s){var e=!1;return clearTimeout(t),t=setTimeout(function(){o.found(!1)},1200),i<0?(o.elements.map(function(e,t){e.symbols[n]===s?(e.elemSymbols[n].classList.add("fadeOutDown"),e.elemText.style.transform="scale(1.5)",i=t,performance.now()):e.elem.style.display="none"}),n++):o.elements[i].symbols[n]===s?(o.elements[i].elemSymbols[n].classList.remove("fadeIn"),o.elements[i].elemSymbols[n].classList.add("fadeOutDown"),n++):(o.elements[i].setText(o.makePhrase(o.elements[i].text.length)),i=-1,n=0),0<=i&&o.elements[i].symbols.length===n?(o.elements[i].setText(o.makePhrase(o.elements[i].text.length)),gameObjects.player.runAction(o.elements[i].action,+o.elements[i].direction),i=-1,e=!(n=0)):0<=i&&o.elements[i].elemSymbols[n].classList.add("ui__symbol_selected"),i<0&&(o.elements.map(function(e){e.elem.style.display="",e.elemText.style.transform=""}),i=-1,n=0,!!e)}}
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var activeDrawsList=[],showFrameRate=!1;function animate(t){var i="number"==typeof(t="object"==_typeof(t)?t:{}).duration?t.duration:1e3,e="number"==typeof t.delay?t.delay:0,n="number"==typeof t.from?t.from:1,o="number"==typeof t.to?t.to:100,f="function"==typeof t.timing?t.timing:linear,c="function"==typeof t.draw?t.draw:function(t){console.log(100*t)},s="function"==typeof t.before?t.before:function(){},m="function"==typeof t.after?t.after:function(){},p=n/100,y=o/100;setTimeout(function(){for(var a=performance.now(),u=a,t=activeDrawsList.length-1;0<=t;t--)if(activeDrawsList[t]===c)return!1;activeDrawsList.push(c);requestAnimationFrame(function t(e){s&&(s(),s=!1);var n=(e-a)/i;if(1<n&&(n=1),p<y)var o=(n+=p)<y;else o=y<(n=-(n-p));var r=f(n);c(r),o?(requestAnimationFrame(t),showFrameRate&&(console.log(frameRate(u,e),Math.round(100*n)),u=e)):(activeDrawsList.splice(activeDrawsList.indexOf(c),1),m&&m())})},e)}function frameRate(t,e){return Math.round(1e3/(e-t))}function zone(t,e,n,o){if(n*=100,o*=100,(e*=100)<=(t*=100)&&t<=n){var r=(t-e)/(n-e);return o&&o(r),r}return t<=e?0:n<=t?1:void 0}function makeEaseOut(e){return function(t){return 1-e(1-t)}}function makeEaseInOut(e){return function(t){return t<.5?e(2*t)/2:(2-e(2*(1-t)))/2}}function linear(t){return t}function quad(t){return Math.pow(t,2)}var quadEaseOut=makeEaseOut(quad);function circ(t){return 1-Math.sin(Math.acos(t))}var circEaseOut=makeEaseOut(circ);function back(t,e){return Math.pow(e,2)*((t+1)*e-t)}var backEaseOut=makeEaseOut(back);function bounce(t){for(var e=0,n=1;;e+=n,n/=2)if((7-4*e)/11<=t)return-Math.pow((11-6*e-11*t)/4,2)+Math.pow(n,2)}var bounceEaseOut=makeEaseOut(bounce);function elastic(t,e){return Math.pow(2,10*(e-1))*Math.cos(20*Math.PI*t/3*e)}var elasticEaseOut=makeEaseOut(elastic);
"use strict";function ready(e){document.addEventListener("DOMContentLoaded",e)}function addEvent(e,t,n){null!=e&&void 0!==e&&(e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n)}function compareRandom(e,t){return Math.random()-.5}function getDocument(e,t){var n=new XMLHttpRequest;n.open("GET",e),n.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var e=(new DOMParser).parseFromString(this.responseText,"text/html");t(e)}},n.send(null)}function getCookie(e){var t=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):void 0}!function(e,t,n){n=n||window;var o=!1;n.addEventListener(e,function(){o||(o=!0,requestAnimationFrame(function(){n.dispatchEvent(new CustomEvent(t)),o=!1}))})}("resize","optimizedResize");
"use strict";var breakpoint={small:767,medium:992,large:1200};function respondTo(i,n,e,t){if(i>=window.innerWidth){var r=!0;e&&requestAnimationFrame(n)}else r=!1;t&&window.addEventListener("optimizedResize",function(){if(!r&&(r=!0,i>=window.innerWidth))return setTimeout(function(){requestAnimationFrame(n)},100),!0;i<=window.innerWidth&&(r=!1)})}function respondFrom(i,n,e,t){if(i<=window.innerWidth){var r=!0;e&&requestAnimationFrame(n)}else r=!1;t&&window.addEventListener("optimizedResize",function(){if(!r&&(r=!0,i<=window.innerWidth))return setTimeout(function(){requestAnimationFrame(n)},100),!0;i>=window.innerWidth&&(r=!1)})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
