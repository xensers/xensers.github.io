"use strict";function funText(t,a){var n=t.innerText;t.innerHTML="",n.split("").map(function(n,e){var i=document.createElement("span");n=" "===n?"&nbsp;":n,i.innerHTML=n,i.className=a,i.style.display="inline-block",i.style.animationDelay=100*e+"ms",t.appendChild(i)})}
"use strict";function Hero(s){var n=this,i=[],o=s.querySelector(".hero__skillet");this.state={action:!1,nextAction:!1,pose:null,direction:1,directionY:1,positionX:0,positionY:0,speedX:0,boostX:0,speedY:0,boostY:0},this.setPose=function(t){return n.state.pose&&requestAnimationFrame(function(){s.classList.remove("hero_"+n.state.pose)}),t&&(n.state.pose=t,requestAnimationFrame(function(){s.classList.add("hero_"+t)})),n},this.unsetPose=function(t){return n.state.pose=null,requestAnimationFrame(function(){s.classList.remove("hero_"+t)}),n},this.setSkin=function(t){return s.classList.remove("hero_"+n.state.skin),(n.state.skin=t)&&s.classList.add("hero_"+t),n},this.runAction=function(t,e){if(1!==e&&-1!==e||e!==n.state.direction&&(n.state.direction=e,n.state.speedX=0),-1!==i.indexOf(t))return n.state.nextAction=[t,e],n;var s=!!a[t]&&a[t];if(!s)return n;i.push(t);var o=0;return s.map(function(t){setTimeout(t.action,o),o+=t.duration?t.duration:0}),setTimeout(function(){i.splice(i.indexOf(t,1)),n.state.nextAction&&(n.runAction(n.state.nextAction[0],n.state.nextAction[1]),n.state.nextAction=!1)},o),n};var a={jump:[{name:"jump-start",duration:1500,action:function(){0<!n.state.positionY&&(n.state.speedY=60,n.state.boostX=40)}}],down:[{name:"down-start",duration:500,action:function(){n.setPose("down")}},{name:"down-end",action:function(){n.unsetPose("down")}}],move:[{name:"Step1",duration:300,action:function(){n.state.boostX=35,n.state.pose||n.setPose("step-1")}},{name:"Step2",duration:300,action:function(){n.unsetPose("step-1"),n.state.pose||n.setPose("step-2")}},{name:"stop",action:function(){n.unsetPose("step-2")}}],damage:[{name:"takeDamageStart",duration:300,action:function(){n.setPose("damage")}},{name:"takeDamageEnd",action:function(){n.unsetPose("damage")}}],hit:[{name:"hit1",duration:300,action:function(){n.setPose("hit-1")}},{name:"hit2",duration:300,action:function(){n.unsetPose("hit-1"),n.setPose("hit-2");var t=!1;for(var e in gameObjects)if(gameObjects[e]!==n){var s=gameObjects[e].state.positionX-n.state.positionX,o=gameObjects[e].state.positionY-n.state.positionY;Math.abs(s)<=200&&Math.abs(o)<100&&(t||(0<s?(n.state.direction=1,gameObjects[e].state.direction=-1):(n.state.direction=-1,gameObjects[e].state.direction=1),t=!0),n.state.direction+gameObjects[e].state.direction===0&&0<s*n.state.direction&&(gameObjects[e].state.speedX=-50,gameObjects[e].runAction("damage")))}}},{name:"hitEnd",action:function(){n.unsetPose("hit-2")}}]};return animationsLoop.push(function(){var t=physics(n.state.positionX,n.state.boostX,n.state.speedX,n.state.direction,arena.xMax,arena.xMin);n.state.positionX=t.position,n.state.boostX=t.boost,n.state.speedX=t.speed,n.state.direction=t.direction;var e=physics(n.state.positionY,n.state.boostY,n.state.speedY,n.state.directionY,arena.yMax,arena.yMin);n.state.positionY=e.position,n.state.boostY=e.boost,n.state.speedY=e.speed,n.state.directionY=e.direction,0===n.state.speedY&&0<n.state.positionY&&(n.state.directionY=-1),-1===n.state.directionY&&(n.state.speedY+=3),n.state.positionY<=0&&n.state.speedY<80&&(n.state.boostY=0,n.state.speedY=0,n.state.positionY=0,n.state.directionY=1,"jump"===n.state.pose&&(n.setPose("landed"),setTimeout(function(){n.unsetPose("landed"),n.unsetPose("jump")},300))),0<n.state.speedY?n.state.pose||n.setPose("jump"):n.unsetPose("jump"),s.style.transform="translate(".concat(n.state.positionX,"%, ").concat(-n.state.positionY,"%)"),o.style.transform="scaleX(".concat(n.state.direction,")")}),this}
"use strict";function physics(s,t,a,i,b,h){return a=Math.abs(a)<1?0:a,0<(t=t<=0?0:t)?(t-=1+Math.abs(t)/100,a+=1+Math.abs(t)/100):0!==a&&0<a?a-=1+Math.abs(a)/100:0!==a&&a<0&&(a+=1+Math.abs(a)/100),b<(s+=a/10*i)?i=0<a?-1:1:s<h&&(i=0<a?1:-1),{position:s,boost:t,speed:a,direction:i}}
"use strict";function Ui(){var o=this,n=0,l=-1;this.makePhrase=function(e){for(var l="",i="abcdefghijklmnopqrstuvwxyz",m=i.length,t=function(t){var s=i.charAt(Math.floor(Math.random()*m)),n=!1;0===t&&o.elements.map(function(e){e.symbols[0]===s&&(t=-1,n=!0)}),n||(l+=s),a=t},a=0;a<e;a++)t(a);return l},this.elements=[];for(var e=document.querySelectorAll(".ui__element"),t=0;t<e.length;t++){this.elements[t]=new UiElement(e[t]);var s=4;config.lengthPhrasesForActions[this.elements[t].action]&&(s=config.lengthPhrasesForActions[this.elements[t].action]),this.elements[t].setText(this.makePhrase(s))}this.found=function(s){var e=!1;return l<0?(o.elements.map(function(e,t){e.symbols[n]===s?(e.elemSymbols[n].classList.add("fadeOutDown"),e.elemText.style.transform="scale(1.5)",l=t):e.elem.style.display="none"}),n++):o.elements[l].symbols[n]===s?(o.elements[l].elemSymbols[n].classList.remove("fadeIn"),o.elements[l].elemSymbols[n].classList.add("fadeOutDown"),n++):(o.elements[l].setText(o.makePhrase(o.elements[l].text.length)),l=-1,n=0),0<=l&&o.elements[l].symbols.length===n?(o.elements[l].setText(o.makePhrase(o.elements[l].text.length)),gameObjects.player.runAction(o.elements[l].action,+o.elements[l].direction),l=-1,e=!(n=0)):0<=l&&o.elements[l].elemSymbols[n].classList.add("ui__symbol_selected"),!(l<0)||(o.elements.map(function(e){e.elem.style.display="",e.elemText.style.transform=""}),l=-1,n=0,!!e)}}function UiElement(e){var l=this;return this.elem=e,this.text="",this.action=e.dataset.action,this.direction=e.dataset.direction,this.icon=e.dataset.icon,this.symbols=[],this.elemSymbols=[],this.elemText=document.createElement("div"),this.elemText.classList.add("ui__text"),this.elem.appendChild(this.elemText),this.elemUiIcon=document.createElement("div"),this.elemUiIcon.classList.add("ui__icon"),this.elem.appendChild(this.elemUiIcon),this.elemIcon=document.createElement("div"),this.elemIcon.classList.add("icon"),this.elemIcon.classList.add("icon_"+this.icon),this.elemUiIcon.appendChild(this.elemIcon),this.setText=function(e){l.text=e,l.elemText.innerHTML="";var n="fadeIn";l.text.split("").map(function(e,t){var s=document.createElement("span");e=" "===e?"&nbsp;":e,l.symbols[t]=e,s.innerHTML=e,s.className="ui__symbol "+n,s.style.display="inline-block",s.style.animationDelay=100*t+"ms",l.elemSymbols[t]=s,l.elemText.appendChild(s),setTimeout(function(){s.classList.remove(n)},100*(t+1))})},this}
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var activeDrawsList=[],showFrameRate=!1;function animate(t){var i="number"==typeof(t="object"==_typeof(t)?t:{}).duration?t.duration:1e3,e="number"==typeof t.delay?t.delay:0,n="number"==typeof t.from?t.from:1,o="number"==typeof t.to?t.to:100,f="function"==typeof t.timing?t.timing:linear,c="function"==typeof t.draw?t.draw:function(t){console.log(100*t)},s="function"==typeof t.before?t.before:function(){},m="function"==typeof t.after?t.after:function(){},p=n/100,y=o/100;setTimeout(function(){for(var a=performance.now(),u=a,t=activeDrawsList.length-1;0<=t;t--)if(activeDrawsList[t]===c)return!1;activeDrawsList.push(c);requestAnimationFrame(function t(e){s&&(s(),s=!1);var n=(e-a)/i;if(1<n&&(n=1),p<y)var o=(n+=p)<y;else o=y<(n=-(n-p));var r=f(n);c(r),o?(requestAnimationFrame(t),showFrameRate&&(console.log(frameRate(u,e),Math.round(100*n)),u=e)):(activeDrawsList.splice(activeDrawsList.indexOf(c),1),m&&m())})},e)}function frameRate(t,e){return Math.round(1e3/(e-t))}function zone(t,e,n,o){if(n*=100,o*=100,(e*=100)<=(t*=100)&&t<=n){var r=(t-e)/(n-e);return o&&o(r),r}return t<=e?0:n<=t?1:void 0}function makeEaseOut(e){return function(t){return 1-e(1-t)}}function makeEaseInOut(e){return function(t){return t<.5?e(2*t)/2:(2-e(2*(1-t)))/2}}function linear(t){return t}function quad(t){return Math.pow(t,2)}var quadEaseOut=makeEaseOut(quad);function circ(t){return 1-Math.sin(Math.acos(t))}var circEaseOut=makeEaseOut(circ);function back(t,e){return Math.pow(e,2)*((t+1)*e-t)}var backEaseOut=makeEaseOut(back);function bounce(t){for(var e=0,n=1;;e+=n,n/=2)if((7-4*e)/11<=t)return-Math.pow((11-6*e-11*t)/4,2)+Math.pow(n,2)}var bounceEaseOut=makeEaseOut(bounce);function elastic(t,e){return Math.pow(2,10*(e-1))*Math.cos(20*Math.PI*t/3*e)}var elasticEaseOut=makeEaseOut(elastic);
"use strict";function ready(e){document.addEventListener("DOMContentLoaded",e)}function addEvent(e,t,n){null!=e&&void 0!==e&&(e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n)}function compareRandom(e,t){return Math.random()-.5}function getDocument(e,t){var n=new XMLHttpRequest;n.open("GET",e),n.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var e=(new DOMParser).parseFromString(this.responseText,"text/html");t(e)}},n.send(null)}function getCookie(e){var t=document.cookie.match(new RegExp("(?:^|; )"+e.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):void 0}!function(e,t,n){n=n||window;var o=!1;n.addEventListener(e,function(){o||(o=!0,requestAnimationFrame(function(){n.dispatchEvent(new CustomEvent(t)),o=!1}))})}("resize","optimizedResize");
"use strict";var breakpoint={small:767,medium:992,large:1200};function respondTo(i,n,e,t){if(i>=window.innerWidth){var r=!0;e&&requestAnimationFrame(n)}else r=!1;t&&window.addEventListener("optimizedResize",function(){if(!r&&(r=!0,i>=window.innerWidth))return setTimeout(function(){requestAnimationFrame(n)},100),!0;i<=window.innerWidth&&(r=!1)})}function respondFrom(i,n,e,t){if(i<=window.innerWidth){var r=!0;e&&requestAnimationFrame(n)}else r=!1;t&&window.addEventListener("optimizedResize",function(){if(!r&&(r=!0,i<=window.innerWidth))return setTimeout(function(){requestAnimationFrame(n)},100),!0;i>=window.innerWidth&&(r=!1)})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
