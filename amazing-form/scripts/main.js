"use strict";function blurBox(){respondFrom(breakpoint.small,function(){return document.querySelectorAll(".blur-box__outer").forEach(function(i){var e;function o(e){var o,t,n=e.clientX/window.outerWidth,u=e.clientY/window.outerHeight;o=10*u-5,t=10*n-5,requestAnimationFrame(function(){i.style.top=o+"%",i.style.left=t+"%"})}i.onmouseout=function(){clearTimeout(e),e=setTimeout(function(){window.addEventListener("mousemove",o)},300)},i.onmouseover=function(){clearTimeout(e),window.removeEventListener("mousemove",o),i.style.top="0%",i.style.left="0%"}})},!0)}
"use strict";!function(e,n,t){t=t||window;var i=!1;t.addEventListener(e,function(){i||(i=!0,requestAnimationFrame(function(){t.dispatchEvent(new CustomEvent(n)),i=!1}))})}("resize","optimizedResize");
"use strict";var breakpoint={small:767,medium:992,large:1200};function respondTo(i,e,n,t){if(i>=window.innerWidth){n&&requestAnimationFrame(e)}else;t&&window.addEventListener("optimizedResize",function(){if(!active&&(active=!0,i>=window.innerWidth))return setTimeout(function(){requestAnimationFrame(e)},100),!0;i<=window.innerWidth&&(active=!1)})}function respondFrom(i,e,n,t){if(i<=window.innerWidth){n&&requestAnimationFrame(e)}else;t&&window.addEventListener("optimizedResize",function(){if(!active&&(active=!0,i<=window.innerWidth))return setTimeout(function(){requestAnimationFrame(e)},100),!0;i>=window.innerWidth&&(active=!1)})}
"use strict";function initForm(e){var t=e.querySelector('button[type="submit"]');validateForm(e),t&&(t.onclick=function(){return validateForm(e)||(document.documentElement.classList.add("form_submit"),setTimeout(function(){e.submit()},5e3)),!1}),e.querySelectorAll("input").forEach(function(t){inputMask(t),t.addEventListener("blur",function(t){var s;this.parentNode.classList.contains("form__input")&&(s=this.parentNode.querySelector(".icon"),validateInput(this)?(s.classList.remove("icon_success"),s.classList.add("icon_error")):(s.classList.remove("icon_error"),s.classList.add("icon_success"))),validateForm(e)}),t.addEventListener("input",function(t){var s;this.parentNode.classList.contains("form__input")&&((s=this.parentNode.querySelector(".icon")).classList.remove("icon_error"),validateInput(this)?s.classList.remove("icon_success"):(s.classList.add("icon_success"),validateForm(e)))})})}
"use strict";function inputMask(e){function t(e){var t=this,a=this.dataset.mask,n=0,s=a.replace(/\D/g,""),i=this.value.replace(/\D/g,"");s.length>=i.length&&(i=s),a=a.replace(/[_\d]/g,function(e){return i.charAt(n++)||"_"}),this.value=a,(n=a.lastIndexOf(i.substr(-1)))<a.length&&a!==this.dataset.mask?n++:n=a.indexOf("_"),requestAnimationFrame(function(){return function(e,t){if(t.focus(),t.setSelectionRange)t.setSelectionRange(e,e);else if(t.createTextRange){var a=t.createTextRange();a.collapse(!0),a.moveEnd("character",e),a.moveStart("character",e),a.select()}}(n,t)})}e.dataset.mask&&(e.addEventListener("input",t,!1),e.addEventListener("focus",t),e.addEventListener("focus",function(e){0===this.value.length&&(this.value=this.dataset.mask)},!0),e.addEventListener("blur",function(e){this.dataset.mask===this.value&&(this.value="")},!0))}
"use strict";function validateForm(t){for(var a,e=!1,i=0;i<=t.length-1;i++){var r=t[i];e=e||validateInput(r),"submit"===r.type&&((a=r).disabled=!0)}return e||(a.disabled=!1),e}
"use strict";function validateInput(e){var t=!1;return e.value.match(e.pattern)||(t="pattern"),0<e.maxLength&&e.maxLength<e.value.length&&(t="maxLength"),0<e.minLength&&e.minLength>e.value.length&&(t="minLength"),e.required&&e.value.length<=0&&(t="required"),t}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
